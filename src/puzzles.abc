import globals;

struct puzzle_12x8_t
{
    u8[12] tents;
    u8[12] trees;
};

struct puzzle_8x8_t
{
    u8[8] tents;
    u8[8] trees;
};

struct puzzle_6x6_t
{
    u8[6] tents;
    u8[6] trees;
};

void load_puzzle(u8[] prog& ptents, u8[] prog& ptrees, u8 h)
{
    //nhorz = {};
    //nvert = {};
    //chorz = {};
    //cvert = {};
    //marks = {};
    puzzle_solved = false;
    pw = len(ptents);
    ph = h;
    for(u8 x = 0; x < pw; ++x)
    {
        u8 tent = ptents[x];
        u8 tree = ptrees[x];
        for(u8 m = 1, y = 0; m != 0; m <<= 1)
        {
            if(tent & m)
                marks[y][x] = MARK_TREE;
            if(tree & m)
            {
                nhorz[y] += 1;
                nvert[x] += 1;
            }
            if(++y >= ph) break;
        }
    }

    ox = 61 - pw * 7 / 2;
    oy = 28 - ph * 7 / 2;

    $save();
}

void load_puzzle_12x8(puzzle_12x8_t prog& p)
{
    load_puzzle(p.tents, p.trees, 8);
}

void load_puzzle_8x8(puzzle_8x8_t prog& p)
{
    load_puzzle(p.tents, p.trees, 8);
}

void load_puzzle_6x6(puzzle_6x6_t prog& p)
{
    load_puzzle(p.tents, p.trees, 6);
}

void load_next_puzzle()
{
    u16& index = puzzle_index[puzzle_type];
    if(puzzle_type == PUZZLE_EASY_6x6)
        load_puzzle_6x6(PUZZLES_EASY_6x6[index]);
    else if(puzzle_type == PUZZLE_EASY_8x8)
        load_puzzle_8x8(PUZZLES_EASY_8x8[index]);
    else if(puzzle_type == PUZZLE_EASY_12x8)
        load_puzzle_12x8(PUZZLES_EASY_12x8[index]);
    else if(puzzle_type == PUZZLE_HARD_8x8)
        load_puzzle_8x8(PUZZLES_HARD_8x8[index]);
    else if(puzzle_type == PUZZLE_HARD_12x8)
        load_puzzle_12x8(PUZZLES_HARD_12x8[index]);
    index = (index + 1) & 1023;
}
