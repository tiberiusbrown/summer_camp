import sprites;
import globals;

struct help_info_t
{
    char[] prog& str;
    u8 ox, oy;
    u8[4][8] pattern;
    u8[4] nhorz;
    u8[4] nvert;
    bool flash_numbers;
};

help_info_t[6] prog HELP_PAGES =
{
    {
        "Welcome to\nsummer camp!\nWe have many\ncampers to\narrange this\nyear.",
        94, 15,
        {
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_NONE },
            { MARK_TREE, MARK_NONE, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_NONE },
            { MARK_TREE, MARK_NONE, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_NONE, MARK_NONE },
        },
        { 1, 1, 1, 1 },
        { 0, 2, 0, 2 },
    },
    {
        "We need to\nplace tents in\nempty spaces\nso that each\ntent has its\nown tree.",
        94, 15,
        {
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_NONE },
            { MARK_TREE, MARK_NONE, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_NONE, MARK_NONE },
        },
        { 11, 11, 11, 11 },
        { 10, 12, 10, 12 },
    },
    {
        "Trees may be\nadjacent to\nmore than one\ntent.",
        94, 15,
        {
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_TENT, MARK_NONE, MARK_NONE },
        },
        { 11, 11, 11, 11 },
        { 10, 12, 10, 12 },
    },
    {
        "However, each\ntree must be\northogonally\nadjacent to\ntheir own tent.",
        94, 15,
        {
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_NONE, MARK_NONE, MARK_NONE },
        },
        { 11, 11, 11, 11 },
        { 10, 12, 10, 12 },
    },
    {
        "The numbers\nindicate how\nmany tents are\nin each row\nand column.",
        94, 15,
        {
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_TREE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_TENT, MARK_NONE, MARK_NONE },
        },
        { 11, 11, 11, 11 },
        { 10, 12, 10, 12 },
        true
    },
    {
        "Multiple tents\nmay not be\nadjacent, even\ndiagonally.",
        94, 15,
        {
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_NONE, MARK_NONE, MARK_NONE },
            { MARK_TENT, MARK_TREE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_TENT, MARK_NONE, MARK_NONE },
            { MARK_NONE, MARK_NONE, MARK_TREE, MARK_TENT },
            { MARK_TREE, MARK_NONE, MARK_NONE, MARK_NONE },
            { MARK_BADTENT, MARK_TREE, MARK_TREE, MARK_TENT },
            { MARK_NONE, MARK_BADTENT, MARK_NONE, MARK_NONE },
        },
        { 11, 1, 1, 11 },
        { 0, 2, 10, 12 },
    },
};

void draw_help_page(
    help_info_t prog& i)
{
    help_info_t info = i;
    u8 n = 0;
    if((nf & 15) < 8)
        n = 4;

    $set_text_color(WHITE);
    $draw_text(0, 10, info.str);

    for(u8 r = 0; r < 4; ++r)
    {
        for(u8 c = 0; c < 4; ++c)
        {
            $draw_sprite(
                c * 7 + info.ox,
                r * 7 + info.oy,
                SPRITES,
                info.pattern[r + n][c]);
        }
    }
    if(!info.flash_numbers || (nf & 15) >= 4)
    {
        for(u8 i = 0; i < 4; ++i)
        {
            $draw_sprite(
                i * 7 + 2 + info.ox,
                30 + info.oy,
                NUMBERS,
                info.nvert[i]);
            $draw_sprite(
                30 + info.ox,
                i * 7 + 2 + info.oy,
                NUMBERS,
                info.nhorz[i]);
        }
    }
    $draw_rect(info.ox, info.oy, 29, 29, DARK_GRAY);
}

void frame_help()
{
    constexpr u8 N = len(HELP_PAGES) + 4;
    $set_text_font(HELP_FONT);

    if(help_page < 6)
        draw_help_page(HELP_PAGES[help_page]);
    else if(help_page == 6)
    {
        $draw_text(0, 10, "Use the arrow buttons\nto move the cursor.");
        u8 f = 1;
        if((nf & 15) < 4) f = 0;
        $draw_sprite(42, 40, BUTTONS, f);
    }
    else if(help_page == 7)
    {
        $draw_text(0, 10, "Press the A button to\nplace or remove a tent.");
        u8 f = 2;
        if((nf & 15) < 4) f = 0;
        $draw_sprite(42, 40, BUTTONS, f);
    }
    else if(help_page == 8)
    {
        $draw_text(0, 10, "Press the B button to\nmark a space where you\nknow there is no tent.");
        u8 f = 3;
        if((nf & 15) < 4) f = 0;
        $draw_sprite(42, 40, BUTTONS, f);
    }
    else if(help_page == 9)
    {
        $draw_text(0, 10, "Press the B button\ntwice quickly to pause\nor quit the current\npuzzle.");
        u8 f = 3;
        if((nf & 15) < 4) f = 0;
        $draw_sprite(42, 40, BUTTONS, f);
    }

    char[5] str;
    $format(str, "%u/%u", help_page + 1, N);
    u8 w = $text_width(str);
    $draw_text(128 - w, 63, str);

    if($just_pressed(LEFT_BUTTON ) && help_page > 0)
    {
        nf = 0;
        help_page -= 1;
    }
    if($just_pressed(RIGHT_BUTTON ) && help_page < N - 1)
    {
        nf = 0;
        help_page += 1;
    }
    if($just_pressed(A_BUTTON) && help_page++ >= N - 1)
        state = STATE_TITLE;
    if($just_pressed(B_BUTTON))
        state = STATE_TITLE;
}
